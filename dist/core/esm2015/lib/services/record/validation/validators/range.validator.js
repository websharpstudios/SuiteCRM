import { Validators } from '@angular/forms';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export const minValidator = (min) => ((control) => {
    const result = Validators.min(min)(control);
    if (result === null) {
        return null;
    }
    return {
        emailValidator: Object.assign(Object.assign({}, result), { message: {
                labelKey: 'LBL_VALIDATION_ERROR_MIN',
                context: {
                    value: control.value,
                    min: '' + min
                }
            } })
    };
});
export const maxValidator = (max) => ((control) => {
    const result = Validators.max(max)(control);
    if (result === null) {
        return null;
    }
    return {
        emailValidator: Object.assign(Object.assign({}, result), { message: {
                labelKey: 'LBL_VALIDATION_ERROR_MAX',
                context: {
                    value: control.value,
                    max: '' + max
                }
            } })
    };
});
export class RangeValidator {
    applies(record, viewField) {
        if (!viewField || !viewField.fieldDefinition) {
            return false;
        }
        const definition = viewField.fieldDefinition;
        return this.getRangeValidation(definition) !== null;
    }
    getValidator(viewField) {
        if (!viewField || !viewField.fieldDefinition) {
            return [];
        }
        const validation = this.getRangeValidation(viewField.fieldDefinition);
        if (!validation) {
            return [];
        }
        const min = validation.min && parseInt('' + validation.min, 10);
        const max = validation.max && parseInt('' + validation.max, 10);
        const validations = [];
        if (isFinite(min)) {
            validations.push(minValidator(min));
        }
        if (isFinite(max)) {
            validations.push(maxValidator(max));
        }
        return validations;
    }
    getRangeValidation(definition) {
        if (this.isRangeValidation(definition.validation)) {
            return definition.validation;
        }
        if (!definition.validations || !definition.validations.length) {
            return null;
        }
        let validation = null;
        definition.validations.some(entry => {
            validation = entry;
            return this.isRangeValidation(entry);
        });
        return validation;
    }
    isRangeValidation(validation) {
        return validation && validation.type === 'range';
    }
}
RangeValidator.ɵprov = i0.ɵɵdefineInjectable({ factory: function RangeValidator_Factory() { return new RangeValidator(); }, token: RangeValidator, providedIn: "root" });
RangeValidator.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
//# sourceMappingURL=data:application/json;base64,