/**
 * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.
 * Copyright (C) 2021 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Supercharged by SuiteCRM" logo. If the display of the logos is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Supercharged by SuiteCRM".
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { distinctUntilChanged, map, shareReplay, tap } from 'rxjs/operators';
import { EntityGQL } from '../../services/api/graphql-api/api.entity.get';
import { deepClone } from 'common';
import { AppStateStore } from '../app-state/app-state.store';
import * as i0 from "@angular/core";
import * as i1 from "../../services/api/graphql-api/api.entity.get";
import * as i2 from "../app-state/app-state.store";
const initialState = {
    detailView: {},
    editView: {},
    listView: {},
    search: {},
    recordView: {},
    subPanel: {},
    massUpdate: {}
};
let internalState = deepClone(initialState);
const initialCache = {};
let cache = deepClone(initialCache);
export class MetadataStore {
    constructor(recordGQL, appState) {
        this.recordGQL = recordGQL;
        this.appState = appState;
        this.store = new BehaviorSubject(internalState);
        this.state$ = this.store.asObservable();
        this.resourceName = 'viewDefinition';
        this.fieldsMetadata = {
            fields: [
                'id',
                '_id',
            ]
        };
        this.types = [
            'listView',
            'search',
            'recordView',
            'subPanel',
            'massUpdate'
        ];
        this.listViewColumns$ = this.state$.pipe(map(state => state.listView.fields), distinctUntilChanged());
        this.listViewLineActions$ = this.state$.pipe(map(state => state.listView.lineActions), distinctUntilChanged());
        this.listMetadata$ = this.state$.pipe(map(state => state.listView), distinctUntilChanged());
        this.searchMetadata$ = this.state$.pipe(map(state => state.search), distinctUntilChanged());
        this.recordViewMetadata$ = this.state$.pipe(map(state => state.recordView), distinctUntilChanged());
        this.subPanelMetadata$ = this.state$.pipe(map(state => state.subPanel), distinctUntilChanged());
        this.metadata$ = this.state$;
    }
    /**
     * Clear state
     */
    clear() {
        Object.keys(cache).forEach(key => {
            cache[key].unsubscribe();
        });
        cache = deepClone(initialCache);
        this.updateState(deepClone(initialState));
    }
    clearAuthBased() {
        this.clear();
    }
    /**
     * Get all metadata types
     *
     * @returns {string[]} metadata types
     */
    getMetadataTypes() {
        return this.types;
    }
    get() {
        return internalState;
    }
    /**
     * Initial ListViewMeta load if not cached and update state.
     *
     * @param {string} moduleID to fetch
     * @param {string[]} types to fetch
     * @returns any data
     */
    load(moduleID, types) {
        if (!types) {
            types = this.getMetadataTypes();
        }
        return this.getMetadata(moduleID, types).pipe(tap((metadata) => {
            this.updateState(metadata);
        }));
    }
    /**
     * Get ListViewMeta cached Observable or call the backend
     *
     * @param {string} module to fetch
     * @param {string[]} types to retrieve
     * @returns {object} Observable<any>
     */
    getMetadata(module, types = null) {
        if (types === null) {
            types = this.getMetadataTypes();
        }
        let metadataCache = null;
        // check for currently missing and
        const missing = {};
        const loadedTypes = {};
        if (cache[module]) {
            metadataCache = cache[module];
            types.forEach(type => {
                const cached = metadataCache.value;
                if (!cached[type]) {
                    missing[type] = type;
                    return;
                }
                if (Object.keys(cached[type]).length === 0) {
                    missing[type] = type;
                }
                else {
                    loadedTypes[type] = cached[type];
                }
            });
            if (Object.keys(missing).length === 0) {
                return of(metadataCache.value).pipe(shareReplay());
            }
        }
        else {
            cache[module] = new BehaviorSubject({});
        }
        return this.fetchMetadata(module, types).pipe(map((value) => {
            Object.keys(loadedTypes).forEach((type) => {
                if (!value[type] && loadedTypes[type]) {
                    value[type] = loadedTypes[type];
                }
            });
            return value;
        }), shareReplay(), tap((value) => {
            cache[module].next(value);
        }));
    }
    /**
     * Internal API
     */
    /**
     * Update the state
     *
     * @param {object} state to set
     */
    updateState(state) {
        this.store.next(internalState = state);
    }
    /**
     * Fetch the Metadata from the backend
     *
     * @param {string} module to fetch
     * @param {string[]} types to retrieve
     * @returns {object} Observable<{}>
     */
    fetchMetadata(module, types) {
        const fieldsToRetrieve = {
            fields: [
                ...this.fieldsMetadata.fields,
                ...types
            ]
        };
        return this.recordGQL.fetch(this.resourceName, `/api/metadata/view-definitions/${module}`, fieldsToRetrieve)
            .pipe(map(({ data }) => {
            const metadata = {};
            this.parseListViewMetadata(data, metadata);
            this.parseSearchMetadata(data, metadata);
            this.parseRecordViewMetadata(data, metadata);
            this.parseSubPanelMetadata(data, metadata);
            this.parseMassUpdateMetadata(data, metadata);
            return metadata;
        }));
    }
    parseListViewMetadata(data, metadata) {
        if (!data || !data.viewDefinition.listView) {
            return;
        }
        const listViewMeta = {
            fields: [],
            bulkActions: {},
            lineActions: [],
            chartTypes: {},
            filters: []
        };
        if (data.viewDefinition.listView.columns) {
            data.viewDefinition.listView.columns.forEach((field) => {
                listViewMeta.fields.push(field);
            });
        }
        const entries = {
            bulkActions: 'bulkActions',
            lineActions: 'lineActions',
            sidebarWidgets: 'sidebarWidgets',
            availableFilters: 'filters'
        };
        this.addDefinedMeta(listViewMeta, data.viewDefinition.listView, entries);
        metadata.listView = listViewMeta;
    }
    parseSearchMetadata(data, metadata) {
        if (data && data.viewDefinition.search) {
            metadata.search = data.viewDefinition.search;
        }
    }
    parseSubPanelMetadata(data, metadata) {
        if (data && data.viewDefinition.subPanel) {
            metadata.subPanel = data.viewDefinition.subPanel;
        }
    }
    parseMassUpdateMetadata(data, metadata) {
        if (data && data.viewDefinition.massUpdate) {
            metadata.massUpdate = data.viewDefinition.massUpdate;
        }
    }
    parseRecordViewMetadata(data, metadata) {
        if (!data || !data.viewDefinition.recordView) {
            return;
        }
        const recordViewMeta = {
            actions: [],
            templateMeta: {},
            panels: []
        };
        const receivedMeta = data.viewDefinition.recordView;
        const entries = {
            templateMeta: 'templateMeta',
            actions: 'actions',
            panels: 'panels',
            topWidget: 'topWidget',
            sidebarWidgets: 'sidebarWidgets',
            summaryTemplates: 'summaryTemplates',
            vardefs: 'vardefs'
        };
        this.addDefinedMeta(recordViewMeta, receivedMeta, entries);
        metadata.recordView = recordViewMeta;
    }
    addDefinedMeta(metadata, received, keyMap) {
        Object.keys(keyMap).forEach(dataKey => {
            const metadataKey = keyMap[dataKey];
            if (received[dataKey]) {
                metadata[metadataKey] = received[dataKey];
            }
        });
    }
}
MetadataStore.ɵprov = i0.ɵɵdefineInjectable({ factory: function MetadataStore_Factory() { return new MetadataStore(i0.ɵɵinject(i1.EntityGQL), i0.ɵɵinject(i2.AppStateStore)); }, token: MetadataStore, providedIn: "root" });
MetadataStore.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
MetadataStore.ctorParameters = () => [
    { type: EntityGQL },
    { type: AppStateStore }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGEuc3RvcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvcmUvYXBwL2NvcmUvc3JjL2xpYi9zdG9yZS9tZXRhZGF0YS9tZXRhZGF0YS5zdG9yZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F3Qkc7QUFFSCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxlQUFlLEVBQWMsRUFBRSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3JELE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwrQ0FBK0MsQ0FBQztBQUN4RSxPQUFPLEVBR0gsU0FBUyxFQVFaLE1BQU0sUUFBUSxDQUFDO0FBRWhCLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQzs7OztBQTBDM0QsTUFBTSxZQUFZLEdBQWE7SUFDM0IsVUFBVSxFQUFFLEVBQUU7SUFDZCxRQUFRLEVBQUUsRUFBRTtJQUNaLFFBQVEsRUFBRSxFQUFrQjtJQUM1QixNQUFNLEVBQUUsRUFBZ0I7SUFDeEIsVUFBVSxFQUFFLEVBQXdCO0lBQ3BDLFFBQVEsRUFBRSxFQUFrQjtJQUM1QixVQUFVLEVBQUUsRUFBb0I7Q0FDbkMsQ0FBQztBQUdGLElBQUksYUFBYSxHQUFhLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQU90RCxNQUFNLFlBQVksR0FBa0IsRUFBbUIsQ0FBQztBQUV4RCxJQUFJLEtBQUssR0FBa0IsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBS25ELE1BQU0sT0FBTyxhQUFhO0lBOEJ0QixZQUFzQixTQUFvQixFQUFZLFFBQXVCO1FBQXZELGNBQVMsR0FBVCxTQUFTLENBQVc7UUFB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QUUsRUFBYztZQUN2QixZQUFZLEVBQUUsRUFBNEI7WUFDMUMsTUFBTSxFQUFFLEVBQUU7U0FDYixDQUFDO1FBRUYsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7UUFDcEQsTUFBTSxPQUFPLEdBQUc7WUFDWixZQUFZLEVBQUUsY0FBYztZQUM1QixPQUFPLEVBQUUsU0FBUztZQUNsQixNQUFNLEVBQUUsUUFBUTtZQUNoQixTQUFTLEVBQUUsV0FBVztZQUN0QixjQUFjLEVBQUUsZ0JBQWdCO1lBQ2hDLGdCQUFnQixFQUFFLGtCQUFrQjtZQUNwQyxPQUFPLEVBQUUsU0FBUztTQUNyQixDQUFDO1FBRUYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTNELFFBQVEsQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDO0lBQ3pDLENBQUM7SUFFUyxjQUFjLENBQ3BCLFFBQWdDLEVBQ2hDLFFBQWdDLEVBQ2hDLE1BQWlDO1FBRWpDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDbkIsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUM3QztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7OztZQWhTSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7OztZQWhGTyxTQUFTO1lBY1QsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3VpdGVDUk0gaXMgYSBjdXN0b21lciByZWxhdGlvbnNoaXAgbWFuYWdlbWVudCBwcm9ncmFtIGRldmVsb3BlZCBieSBTYWxlc0FnaWxpdHkgTHRkLlxuICogQ29weXJpZ2h0IChDKSAyMDIxIFNhbGVzQWdpbGl0eSBMdGQuXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQgdW5kZXJcbiAqIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHZlcnNpb24gMyBhcyBwdWJsaXNoZWQgYnkgdGhlXG4gKiBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24gd2l0aCB0aGUgYWRkaXRpb24gb2YgdGhlIGZvbGxvd2luZyBwZXJtaXNzaW9uIGFkZGVkXG4gKiB0byBTZWN0aW9uIDE1IGFzIHBlcm1pdHRlZCBpbiBTZWN0aW9uIDcoYSk6IEZPUiBBTlkgUEFSVCBPRiBUSEUgQ09WRVJFRCBXT1JLXG4gKiBJTiBXSElDSCBUSEUgQ09QWVJJR0hUIElTIE9XTkVEIEJZIFNBTEVTQUdJTElUWSwgU0FMRVNBR0lMSVRZIERJU0NMQUlNUyBUSEVcbiAqIFdBUlJBTlRZIE9GIE5PTiBJTkZSSU5HRU1FTlQgT0YgVEhJUkQgUEFSVFkgUklHSFRTLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLCBidXQgV0lUSE9VVFxuICogQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1NcbiAqIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmVcbiAqIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBJbiBhY2NvcmRhbmNlIHdpdGggU2VjdGlvbiA3KGIpIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIHZlcnNpb24gMywgdGhlc2UgQXBwcm9wcmlhdGUgTGVnYWwgTm90aWNlcyBtdXN0IHJldGFpbiB0aGUgZGlzcGxheSBvZiB0aGVcbiAqIFwiU3VwZXJjaGFyZ2VkIGJ5IFN1aXRlQ1JNXCIgbG9nby4gSWYgdGhlIGRpc3BsYXkgb2YgdGhlIGxvZ29zIGlzIG5vdCByZWFzb25hYmx5XG4gKiBmZWFzaWJsZSBmb3IgdGVjaG5pY2FsIHJlYXNvbnMsIHRoZSBBcHByb3ByaWF0ZSBMZWdhbCBOb3RpY2VzIG11c3QgZGlzcGxheVxuICogdGhlIHdvcmRzIFwiU3VwZXJjaGFyZ2VkIGJ5IFN1aXRlQ1JNXCIuXG4gKi9cblxuaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHNoYXJlUmVwbGF5LCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7RW50aXR5R1FMfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hcGkvZ3JhcGhxbC1hcGkvYXBpLmVudGl0eS5nZXQnO1xuaW1wb3J0IHtcbiAgICBBY3Rpb24sXG4gICAgQ29sdW1uRGVmaW5pdGlvbixcbiAgICBkZWVwQ2xvbmUsXG4gICAgRmllbGREZWZpbml0aW9uTWFwLFxuICAgIExpc3RWaWV3TWV0YSxcbiAgICBNYXNzVXBkYXRlTWV0YSxcbiAgICBQYW5lbCxcbiAgICBTZWFyY2hNZXRhLFxuICAgIFN1YlBhbmVsTWV0YSxcbiAgICBXaWRnZXRNZXRhZGF0YVxufSBmcm9tICdjb21tb24nO1xuaW1wb3J0IHtTdGF0ZVN0b3JlfSBmcm9tICcuLi9zdGF0ZSc7XG5pbXBvcnQge0FwcFN0YXRlU3RvcmV9IGZyb20gJy4uL2FwcC1zdGF0ZS9hcHAtc3RhdGUuc3RvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1bW1hcnlUZW1wbGF0ZXMge1xuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWNvcmRWaWV3TWV0YWRhdGEge1xuICAgIHRvcFdpZGdldD86IFdpZGdldE1ldGFkYXRhO1xuICAgIHNpZGViYXJXaWRnZXRzPzogV2lkZ2V0TWV0YWRhdGFbXTtcbiAgICBhY3Rpb25zPzogQWN0aW9uW107XG4gICAgdGVtcGxhdGVNZXRhPzogUmVjb3JkVGVtcGxhdGVNZXRhZGF0YTtcbiAgICBwYW5lbHM/OiBQYW5lbFtdO1xuICAgIHN1bW1hcnlUZW1wbGF0ZXM/OiBTdW1tYXJ5VGVtcGxhdGVzO1xuICAgIHZhcmRlZnM/OiBGaWVsZERlZmluaXRpb25NYXA7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb3JkVGVtcGxhdGVNZXRhZGF0YSB7XG4gICAgbWF4Q29sdW1uczogbnVtYmVyO1xuICAgIHVzZVRhYnM6IGJvb2xlYW47XG4gICAgdGFiRGVmczogVGFiRGVmaW5pdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFiRGVmaW5pdGlvbnMge1xuICAgIFtrZXk6IHN0cmluZ106IFRhYkRlZmluaXRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFiRGVmaW5pdGlvbiB7XG4gICAgbmV3VGFiOiBib29sZWFuO1xuICAgIHBhbmVsRGVmYXVsdDogJ2V4cGFuZGVkJyB8ICdjb2xsYXBzZWQnO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGEge1xuICAgIGRldGFpbFZpZXc/OiBhbnk7XG4gICAgZWRpdFZpZXc/OiBhbnk7XG4gICAgbGlzdFZpZXc/OiBMaXN0Vmlld01ldGE7XG4gICAgc2VhcmNoPzogU2VhcmNoTWV0YTtcbiAgICByZWNvcmRWaWV3PzogUmVjb3JkVmlld01ldGFkYXRhO1xuICAgIHN1YlBhbmVsPzogU3ViUGFuZWxNZXRhO1xuICAgIG1hc3NVcGRhdGU/OiBNYXNzVXBkYXRlTWV0YTtcbn1cblxuY29uc3QgaW5pdGlhbFN0YXRlOiBNZXRhZGF0YSA9IHtcbiAgICBkZXRhaWxWaWV3OiB7fSxcbiAgICBlZGl0Vmlldzoge30sXG4gICAgbGlzdFZpZXc6IHt9IGFzIExpc3RWaWV3TWV0YSxcbiAgICBzZWFyY2g6IHt9IGFzIFNlYXJjaE1ldGEsXG4gICAgcmVjb3JkVmlldzoge30gYXMgUmVjb3JkVmlld01ldGFkYXRhLFxuICAgIHN1YlBhbmVsOiB7fSBhcyBTdWJQYW5lbE1ldGEsXG4gICAgbWFzc1VwZGF0ZToge30gYXMgTWFzc1VwZGF0ZU1ldGFcbn07XG5cblxubGV0IGludGVybmFsU3RhdGU6IE1ldGFkYXRhID0gZGVlcENsb25lKGluaXRpYWxTdGF0ZSk7XG5cblxuZXhwb3J0IGludGVyZmFjZSBNZXRhZGF0YUNhY2hlIHtcbiAgICBba2V5OiBzdHJpbmddOiBCZWhhdmlvclN1YmplY3Q8TWV0YWRhdGE+O1xufVxuXG5jb25zdCBpbml0aWFsQ2FjaGU6IE1ldGFkYXRhQ2FjaGUgPSB7fSBhcyBNZXRhZGF0YUNhY2hlO1xuXG5sZXQgY2FjaGU6IE1ldGFkYXRhQ2FjaGUgPSBkZWVwQ2xvbmUoaW5pdGlhbENhY2hlKTtcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFTdG9yZSBpbXBsZW1lbnRzIFN0YXRlU3RvcmUge1xuXG4gICAgLyoqXG4gICAgICogUHVibGljIGxvbmctbGl2ZWQgb2JzZXJ2YWJsZSBzdHJlYW1zXG4gICAgICovXG4gICAgbGlzdFZpZXdDb2x1bW5zJDogT2JzZXJ2YWJsZTxDb2x1bW5EZWZpbml0aW9uW10+O1xuICAgIGxpc3RWaWV3TGluZUFjdGlvbnMkOiBPYnNlcnZhYmxlPEFjdGlvbltdPjtcbiAgICBsaXN0TWV0YWRhdGEkOiBPYnNlcnZhYmxlPExpc3RWaWV3TWV0YT47XG4gICAgc2VhcmNoTWV0YWRhdGEkOiBPYnNlcnZhYmxlPFNlYXJjaE1ldGE+O1xuICAgIHJlY29yZFZpZXdNZXRhZGF0YSQ6IE9ic2VydmFibGU8UmVjb3JkVmlld01ldGFkYXRhPjtcbiAgICBtZXRhZGF0YSQ6IE9ic2VydmFibGU8TWV0YWRhdGE+O1xuICAgIHN1YlBhbmVsTWV0YWRhdGEkOiBPYnNlcnZhYmxlPFN1YlBhbmVsTWV0YT47XG5cbiAgICBwcm90ZWN0ZWQgc3RvcmUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE1ldGFkYXRhPihpbnRlcm5hbFN0YXRlKTtcbiAgICBwcm90ZWN0ZWQgc3RhdGUkID0gdGhpcy5zdG9yZS5hc09ic2VydmFibGUoKTtcbiAgICBwcm90ZWN0ZWQgcmVzb3VyY2VOYW1lID0gJ3ZpZXdEZWZpbml0aW9uJztcbiAgICBwcm90ZWN0ZWQgZmllbGRzTWV0YWRhdGEgPSB7XG4gICAgICAgIGZpZWxkczogW1xuICAgICAgICAgICAgJ2lkJyxcbiAgICAgICAgICAgICdfaWQnLFxuICAgICAgICBdXG4gICAgfTtcbiAgICBwcm90ZWN0ZWQgdHlwZXMgPSBbXG4gICAgICAgICdsaXN0VmlldycsXG4gICAgICAgICdzZWFyY2gnLFxuICAgICAgICAncmVjb3JkVmlldycsXG4gICAgICAgICdzdWJQYW5lbCcsXG4gICAgICAgICdtYXNzVXBkYXRlJ1xuICAgIF07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVjb3JkR1FMOiBFbnRpdHlHUUwsIHByb3RlY3RlZCBhcHBTdGF0ZTogQXBwU3RhdGVTdG9yZSkge1xuICAgICAgICB0aGlzLmxpc3RWaWV3Q29sdW1ucyQgPSB0aGlzLnN0YXRlJC5waXBlKG1hcChzdGF0ZSA9PiBzdGF0ZS5saXN0Vmlldy5maWVsZHMpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgICAgICAgdGhpcy5saXN0Vmlld0xpbmVBY3Rpb25zJCA9IHRoaXMuc3RhdGUkLnBpcGUobWFwKHN0YXRlID0+IHN0YXRlLmxpc3RWaWV3LmxpbmVBY3Rpb25zKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gICAgICAgIHRoaXMubGlzdE1ldGFkYXRhJCA9IHRoaXMuc3RhdGUkLnBpcGUobWFwKHN0YXRlID0+IHN0YXRlLmxpc3RWaWV3KSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gICAgICAgIHRoaXMuc2VhcmNoTWV0YWRhdGEkID0gdGhpcy5zdGF0ZSQucGlwZShtYXAoc3RhdGUgPT4gc3RhdGUuc2VhcmNoKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gICAgICAgIHRoaXMucmVjb3JkVmlld01ldGFkYXRhJCA9IHRoaXMuc3RhdGUkLnBpcGUobWFwKHN0YXRlID0+IHN0YXRlLnJlY29yZFZpZXcpLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKTtcbiAgICAgICAgdGhpcy5zdWJQYW5lbE1ldGFkYXRhJCA9IHRoaXMuc3RhdGUkLnBpcGUobWFwKHN0YXRlID0+IHN0YXRlLnN1YlBhbmVsKSwgZGlzdGluY3RVbnRpbENoYW5nZWQoKSk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEkID0gdGhpcy5zdGF0ZSQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgc3RhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xlYXIoKTogdm9pZCB7XG4gICAgICAgIE9iamVjdC5rZXlzKGNhY2hlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBjYWNoZVtrZXldLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjYWNoZSA9IGRlZXBDbG9uZShpbml0aWFsQ2FjaGUpO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKGRlZXBDbG9uZShpbml0aWFsU3RhdGUpKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xlYXJBdXRoQmFzZWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIG1ldGFkYXRhIHR5cGVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nW119IG1ldGFkYXRhIHR5cGVzXG4gICAgICovXG4gICAgcHVibGljIGdldE1ldGFkYXRhVHlwZXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0KCk6IE1ldGFkYXRhIHtcbiAgICAgICAgcmV0dXJuIGludGVybmFsU3RhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbCBMaXN0Vmlld01ldGEgbG9hZCBpZiBub3QgY2FjaGVkIGFuZCB1cGRhdGUgc3RhdGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlSUQgdG8gZmV0Y2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB0eXBlcyB0byBmZXRjaFxuICAgICAqIEByZXR1cm5zIGFueSBkYXRhXG4gICAgICovXG4gICAgcHVibGljIGxvYWQobW9kdWxlSUQ6IHN0cmluZywgdHlwZXM6IHN0cmluZ1tdKTogYW55IHtcblxuICAgICAgICBpZiAoIXR5cGVzKSB7XG4gICAgICAgICAgICB0eXBlcyA9IHRoaXMuZ2V0TWV0YWRhdGFUeXBlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWV0YWRhdGEobW9kdWxlSUQsIHR5cGVzKS5waXBlKFxuICAgICAgICAgICAgdGFwKChtZXRhZGF0YTogTWV0YWRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlKG1ldGFkYXRhKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IExpc3RWaWV3TWV0YSBjYWNoZWQgT2JzZXJ2YWJsZSBvciBjYWxsIHRoZSBiYWNrZW5kXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kdWxlIHRvIGZldGNoXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdHlwZXMgdG8gcmV0cmlldmVcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBPYnNlcnZhYmxlPGFueT5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TWV0YWRhdGEobW9kdWxlOiBzdHJpbmcsIHR5cGVzOiBzdHJpbmdbXSA9IG51bGwpOiBPYnNlcnZhYmxlPE1ldGFkYXRhPiB7XG5cbiAgICAgICAgaWYgKHR5cGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICB0eXBlcyA9IHRoaXMuZ2V0TWV0YWRhdGFUeXBlcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1ldGFkYXRhQ2FjaGU6IEJlaGF2aW9yU3ViamVjdDxNZXRhZGF0YT4gPSBudWxsO1xuICAgICAgICAvLyBjaGVjayBmb3IgY3VycmVudGx5IG1pc3NpbmcgYW5kXG4gICAgICAgIGNvbnN0IG1pc3NpbmcgPSB7fTtcbiAgICAgICAgY29uc3QgbG9hZGVkVHlwZXMgPSB7fTtcblxuICAgICAgICBpZiAoY2FjaGVbbW9kdWxlXSkge1xuICAgICAgICAgICAgbWV0YWRhdGFDYWNoZSA9IGNhY2hlW21vZHVsZV07XG5cbiAgICAgICAgICAgIHR5cGVzLmZvckVhY2godHlwZSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjYWNoZWQgPSBtZXRhZGF0YUNhY2hlLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjYWNoZWRbdHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgbWlzc2luZ1t0eXBlXSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoY2FjaGVkW3R5cGVdKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbWlzc2luZ1t0eXBlXSA9IHR5cGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVkVHlwZXNbdHlwZV0gPSBjYWNoZWRbdHlwZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhtaXNzaW5nKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YobWV0YWRhdGFDYWNoZS52YWx1ZSkucGlwZShzaGFyZVJlcGxheSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlW21vZHVsZV0gPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHt9IGFzIE1ldGFkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoTWV0YWRhdGEobW9kdWxlLCB0eXBlcykucGlwZShcbiAgICAgICAgICAgIG1hcCgodmFsdWU6IE1ldGFkYXRhKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhsb2FkZWRUeXBlcykuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlW3R5cGVdICYmIGxvYWRlZFR5cGVzW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVt0eXBlXSA9IGxvYWRlZFR5cGVzW3R5cGVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHNoYXJlUmVwbGF5KCksXG4gICAgICAgICAgICB0YXAoKHZhbHVlOiBNZXRhZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIGNhY2hlW21vZHVsZV0ubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIEFQSVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBzdGF0ZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIHRvIHNldFxuICAgICAqL1xuICAgIHByb3RlY3RlZCB1cGRhdGVTdGF0ZShzdGF0ZTogTWV0YWRhdGEpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdG9yZS5uZXh0KGludGVybmFsU3RhdGUgPSBzdGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmV0Y2ggdGhlIE1ldGFkYXRhIGZyb20gdGhlIGJhY2tlbmRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGUgdG8gZmV0Y2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB0eXBlcyB0byByZXRyaWV2ZVxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9IE9ic2VydmFibGU8e30+XG4gICAgICovXG4gICAgcHJvdGVjdGVkIGZldGNoTWV0YWRhdGEobW9kdWxlOiBzdHJpbmcsIHR5cGVzOiBzdHJpbmdbXSk6IE9ic2VydmFibGU8TWV0YWRhdGE+IHtcblxuICAgICAgICBjb25zdCBmaWVsZHNUb1JldHJpZXZlID0ge1xuICAgICAgICAgICAgZmllbGRzOiBbXG4gICAgICAgICAgICAgICAgLi4udGhpcy5maWVsZHNNZXRhZGF0YS5maWVsZHMsXG4gICAgICAgICAgICAgICAgLi4udHlwZXNcbiAgICAgICAgICAgIF1cbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gdGhpcy5yZWNvcmRHUUwuZmV0Y2godGhpcy5yZXNvdXJjZU5hbWUsIGAvYXBpL21ldGFkYXRhL3ZpZXctZGVmaW5pdGlvbnMvJHttb2R1bGV9YCwgZmllbGRzVG9SZXRyaWV2ZSlcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcCgoe2RhdGF9KSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge30gYXMgTWV0YWRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VMaXN0Vmlld01ldGFkYXRhKGRhdGEsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZVNlYXJjaE1ldGFkYXRhKGRhdGEsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZVJlY29yZFZpZXdNZXRhZGF0YShkYXRhLCBtZXRhZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyc2VTdWJQYW5lbE1ldGFkYXRhKGRhdGEsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZU1hc3NVcGRhdGVNZXRhZGF0YShkYXRhLCBtZXRhZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBwYXJzZUxpc3RWaWV3TWV0YWRhdGEoZGF0YSwgbWV0YWRhdGE6IE1ldGFkYXRhKTogdm9pZCB7XG5cbiAgICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLnZpZXdEZWZpbml0aW9uLmxpc3RWaWV3KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaXN0Vmlld01ldGE6IExpc3RWaWV3TWV0YSA9IHtcbiAgICAgICAgICAgIGZpZWxkczogW10sXG4gICAgICAgICAgICBidWxrQWN0aW9uczoge30sXG4gICAgICAgICAgICBsaW5lQWN0aW9uczogW10sXG4gICAgICAgICAgICBjaGFydFR5cGVzOiB7fSxcbiAgICAgICAgICAgIGZpbHRlcnM6IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGRhdGEudmlld0RlZmluaXRpb24ubGlzdFZpZXcuY29sdW1ucykge1xuICAgICAgICAgICAgZGF0YS52aWV3RGVmaW5pdGlvbi5saXN0Vmlldy5jb2x1bW5zLmZvckVhY2goKGZpZWxkOiBDb2x1bW5EZWZpbml0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgbGlzdFZpZXdNZXRhLmZpZWxkcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBmaWVsZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGVudHJpZXMgPSB7XG4gICAgICAgICAgICBidWxrQWN0aW9uczogJ2J1bGtBY3Rpb25zJyxcbiAgICAgICAgICAgIGxpbmVBY3Rpb25zOiAnbGluZUFjdGlvbnMnLFxuICAgICAgICAgICAgc2lkZWJhcldpZGdldHM6ICdzaWRlYmFyV2lkZ2V0cycsXG4gICAgICAgICAgICBhdmFpbGFibGVGaWx0ZXJzOiAnZmlsdGVycydcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmFkZERlZmluZWRNZXRhKGxpc3RWaWV3TWV0YSwgZGF0YS52aWV3RGVmaW5pdGlvbi5saXN0VmlldywgZW50cmllcyk7XG5cbiAgICAgICAgbWV0YWRhdGEubGlzdFZpZXcgPSBsaXN0Vmlld01ldGE7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHBhcnNlU2VhcmNoTWV0YWRhdGEoZGF0YSwgbWV0YWRhdGE6IE1ldGFkYXRhKTogdm9pZCB7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEudmlld0RlZmluaXRpb24uc2VhcmNoKSB7XG4gICAgICAgICAgICBtZXRhZGF0YS5zZWFyY2ggPSBkYXRhLnZpZXdEZWZpbml0aW9uLnNlYXJjaDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBwYXJzZVN1YlBhbmVsTWV0YWRhdGEoZGF0YSwgbWV0YWRhdGE6IE1ldGFkYXRhKTogdm9pZCB7XG4gICAgICAgIGlmIChkYXRhICYmIGRhdGEudmlld0RlZmluaXRpb24uc3ViUGFuZWwpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhLnN1YlBhbmVsID0gZGF0YS52aWV3RGVmaW5pdGlvbi5zdWJQYW5lbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBwYXJzZU1hc3NVcGRhdGVNZXRhZGF0YShkYXRhLCBtZXRhZGF0YTogTWV0YWRhdGEpOiB2b2lkIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS52aWV3RGVmaW5pdGlvbi5tYXNzVXBkYXRlKSB7XG4gICAgICAgICAgICBtZXRhZGF0YS5tYXNzVXBkYXRlID0gZGF0YS52aWV3RGVmaW5pdGlvbi5tYXNzVXBkYXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHBhcnNlUmVjb3JkVmlld01ldGFkYXRhKGRhdGEsIG1ldGFkYXRhOiBNZXRhZGF0YSk6IHZvaWQge1xuICAgICAgICBpZiAoIWRhdGEgfHwgIWRhdGEudmlld0RlZmluaXRpb24ucmVjb3JkVmlldykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVjb3JkVmlld01ldGE6IFJlY29yZFZpZXdNZXRhZGF0YSA9IHtcbiAgICAgICAgICAgIGFjdGlvbnM6IFtdIGFzIEFjdGlvbltdLFxuICAgICAgICAgICAgdGVtcGxhdGVNZXRhOiB7fSBhcyBSZWNvcmRUZW1wbGF0ZU1ldGFkYXRhLFxuICAgICAgICAgICAgcGFuZWxzOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlY2VpdmVkTWV0YSA9IGRhdGEudmlld0RlZmluaXRpb24ucmVjb3JkVmlldztcbiAgICAgICAgY29uc3QgZW50cmllcyA9IHtcbiAgICAgICAgICAgIHRlbXBsYXRlTWV0YTogJ3RlbXBsYXRlTWV0YScsXG4gICAgICAgICAgICBhY3Rpb25zOiAnYWN0aW9ucycsXG4gICAgICAgICAgICBwYW5lbHM6ICdwYW5lbHMnLFxuICAgICAgICAgICAgdG9wV2lkZ2V0OiAndG9wV2lkZ2V0JyxcbiAgICAgICAgICAgIHNpZGViYXJXaWRnZXRzOiAnc2lkZWJhcldpZGdldHMnLFxuICAgICAgICAgICAgc3VtbWFyeVRlbXBsYXRlczogJ3N1bW1hcnlUZW1wbGF0ZXMnLFxuICAgICAgICAgICAgdmFyZGVmczogJ3ZhcmRlZnMnXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5hZGREZWZpbmVkTWV0YShyZWNvcmRWaWV3TWV0YSwgcmVjZWl2ZWRNZXRhLCBlbnRyaWVzKTtcblxuICAgICAgICBtZXRhZGF0YS5yZWNvcmRWaWV3ID0gcmVjb3JkVmlld01ldGE7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFkZERlZmluZWRNZXRhKFxuICAgICAgICBtZXRhZGF0YTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSxcbiAgICAgICAgcmVjZWl2ZWQ6IHsgW2tleTogc3RyaW5nXTogYW55IH0sXG4gICAgICAgIGtleU1hcDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfVxuICAgICk6IHZvaWQge1xuICAgICAgICBPYmplY3Qua2V5cyhrZXlNYXApLmZvckVhY2goZGF0YUtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YUtleSA9IGtleU1hcFtkYXRhS2V5XTtcbiAgICAgICAgICAgIGlmIChyZWNlaXZlZFtkYXRhS2V5XSkge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhW21ldGFkYXRhS2V5XSA9IHJlY2VpdmVkW2RhdGFLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=