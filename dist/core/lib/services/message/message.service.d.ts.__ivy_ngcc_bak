/**
 * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.
 * Copyright (C) 2021 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Supercharged by SuiteCRM" logo. If the display of the logos is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Supercharged by SuiteCRM".
 */
import { Message } from 'common';
import { BehaviorSubject, Observable } from 'rxjs';
import { SystemConfigStore } from '../../store/system-config/system-config.store';
export declare class MessageService {
    config: SystemConfigStore;
    messages$: Observable<Message[]>;
    protected messages: Message[];
    protected messagesStage: BehaviorSubject<Message[]>;
    protected timeout: number;
    constructor(config: SystemConfigStore);
    updateState(messages: Message[]): void;
    removeMessages(): void;
    contains(message: Message, remove?: boolean): boolean;
    addMessage(message: Message): number;
    addPrimaryMessage(text: string): number;
    addSecondaryMessage(text: string): number;
    addSuccessMessage(text: string): number;
    addSuccessMessageByKey(labelKey: string): number;
    addDangerMessage(text: string): number;
    addDangerMessageByKey(labelKey: string): number;
    addWarningMessage(text: string): number;
    addWarningMessageByKey(labelKey: string): number;
    addInfoMessage(text: string): number;
    addDarkMessage(text: string): number;
    log(...args: any[]): void;
    error(...args: any[]): void;
    protected initTimeOut(): void;
}
